{"ast":null,"code":"import { catchError, EMPTY } from 'rxjs';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"http://localhost:3001/products\";\n  }\n  showOnConsole(msg) {\n    console.log(msg);\n  }\n  exibirMensagem(mensagem, titulo, tipo) {\n    console.log('error');\n  }\n  create(product) {\n    return this.http.post(this.baseUrl, product).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  read() {\n    return this.http.get(this.baseUrl).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  readById(id) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.get(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  update(product) {\n    const url = `${this.baseUrl}/${product.id}`;\n    return this.http.put(url, product).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  delete(id) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.delete(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  errorHandler(e) {\n    this.exibirMensagem('ocorreu um error na operacao', 'error!', 'toast-error');\n    return EMPTY;\n  }\n  static #_ = this.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAoBA,UAAU,EAACC,KAAK,QAAO,MAAM;AACjD,SAASC,GAAG,QAAQ,MAAM;;;AAM1B,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAFxB,YAAO,GAAG,gCAAgC;EAEH;EAEvCC,aAAa,CAACC,GAAU;IACtBC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAClB;EAEAG,cAAc,CAACC,QAAe,EAACC,MAAa,EAACC,IAAW;IACtDL,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACtB;EAEAK,MAAM,CAACC,OAAe;IACpB,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAU,IAAI,CAACC,OAAO,EAACF,OAAO,CAAC,CAACG,IAAI,CACvDhB,GAAG,CAACiB,GAAG,IAAIA,GAAG,CAAC,EACfnB,UAAU,CAACoB,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAE,IAAI;IACF,OAAO,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAAY,IAAI,CAACN,OAAO,CAAC,CAACC,IAAI,CAChDhB,GAAG,CAACiB,GAAG,IAAIA,GAAG,CAAC,EACfnB,UAAU,CAACoB,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAI,QAAQ,CAACC,EAAS;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,IAAIQ,EAAE,EAAE;IACnC,OAAO,IAAI,CAACpB,IAAI,CAACkB,GAAG,CAAUG,GAAG,CAAC,CAACR,IAAI,CACrChB,GAAG,CAACiB,GAAG,IAAIA,GAAG,CAAC,EACfnB,UAAU,CAACoB,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAO,MAAM,CAACZ,OAAe;IACpB,MAAMW,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,IAAIF,OAAO,CAACU,EAAE,EAAE;IAC3C,OAAO,IAAI,CAACpB,IAAI,CAACuB,GAAG,CAAUF,GAAG,EAACX,OAAO,CAAC,CAACG,IAAI,CAC7ChB,GAAG,CAACiB,GAAG,IAAIA,GAAG,CAAC,EACfnB,UAAU,CAACoB,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAS,MAAM,CAACJ,EAAS;IACd,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,IAAIQ,EAAE,EAAE;IACnC,OAAO,IAAI,CAACpB,IAAI,CAACwB,MAAM,CAAUH,GAAG,CAAC,CAACR,IAAI,CACxChB,GAAG,CAACiB,GAAG,IAAIA,GAAG,CAAC,EACfnB,UAAU,CAACoB,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAC,YAAY,CAACD,CAAK;IAChB,IAAI,CAACV,cAAc,CAAC,8BAA8B,EAAC,QAAQ,EAAC,aAAa,CAAC;IAC1E,OAAOT,KAAK;EACd;EAAC;qBAvDUE,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAA2B,SAAd3B,cAAc;IAAA4B,YAFb;EAAM","names":["catchError","EMPTY","map","ProductService","constructor","http","showOnConsole","msg","console","log","exibirMensagem","mensagem","titulo","tipo","create","product","post","baseUrl","pipe","obj","e","errorHandler","read","get","readById","id","url","update","put","delete","factory","providedIn"],"sourceRoot":"","sources":["/home/guilherme/projetos front-end/gerenciador-de-livros-pessoais/frontend/src/app/component/product.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable,catchError,EMPTY} from 'rxjs';\nimport { map } from 'rxjs';\nimport { Product } from './product-model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  baseUrl = \"http://localhost:3001/products\"\n\n  constructor(private http:HttpClient) { }\n\n  showOnConsole(msg:string):void{\n    console.log(msg);\n  }\n\n  exibirMensagem(mensagem:string,titulo:string,tipo:string){\n    console.log('error')\n  }\n\n  create(product:Product): Observable<Product>{\n    return this.http.post<Product>(this.baseUrl,product).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  read(): Observable<Product[]>{\n    return this.http.get<Product[]>(this.baseUrl).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    );\n  }\n\n  readById(id:string): Observable<Product>{\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.get<Product>(url).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    );\n  }\n\n  update(product:Product): Observable<Product>{\n    const url = `${this.baseUrl}/${product.id}`;\n    return this.http.put<Product>(url,product).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    );\n  }\n\n  delete(id:string): Observable<Product>{\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.delete<Product>(url).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    );\n  }\n\n  errorHandler(e:any): Observable<any>{\n    this.exibirMensagem('ocorreu um error na operacao','error!','toast-error')\n    return EMPTY\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}